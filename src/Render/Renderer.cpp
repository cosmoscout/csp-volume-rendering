////////////////////////////////////////////////////////////////////////////////////////////////////
//                               This file is part of CosmoScout VR                               //
//      and may be used under the terms of the MIT license. See the LICENSE file for details.     //
//                        Copyright: (c) 2019 German Aerospace Center (DLR)                       //
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Renderer.hpp"

namespace csp::volumerendering {

////////////////////////////////////////////////////////////////////////////////////////////////////

Renderer::Renderer()
    : mCurrentFile("")
    , mCurrentTimestep(0) {
}

////////////////////////////////////////////////////////////////////////////////////////////////////

Renderer::Renderer(std::string path)
    : mCurrentFile(path)
    , mCurrentTimestep(0) {
  updateData();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

Renderer::Renderer(std::string path, int timestep)
    : mCurrentFile(path)
    , mCurrentTimestep(timestep) {
  updateData();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Renderer::setData(std::string path, int timestep) {
  mCurrentFile     = path;
  mCurrentTimestep = timestep;
  updateData();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Renderer::setTime(int timestep) {
  mCurrentTimestep = timestep;
  updateData();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Renderer::setFile(std::string path) {
  mCurrentFile = path;
  updateData();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

vtkSmartPointer<vtkUnstructuredGrid> Renderer::getData() {
  return mDataManager.getData(mCurrentFile, mCurrentTimestep);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Renderer::updateData() {
  mDataManager.loadData(mCurrentFile, mCurrentTimestep);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

} // namespace csp::volumerendering
